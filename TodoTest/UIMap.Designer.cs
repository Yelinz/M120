// ------------------------------------------------------------------------------
//  <auto-generated>
//      Dieser Code wurde vom Coded UI-Test-Generator generiert.
//      Version: 16.0.0.0
//
//      In dieser Datei sind spezialisierte Klassen definiert, die in einem
//      Coded UI-Test verwendet werden.
//      In dieser Datei können die erforderlichen Anpassungen vorgenommen werden.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TodoTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Assert_Fail - Verwenden Sie "Assert_FailExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Assert_Fail()
        {
            #region Variable Declarations
            WpfText uIBeschreibungdarfnichText1 = this.UITodosWindow.UIItemCustom.UIBeschreibungdarfnichText.UIBeschreibungdarfnichText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'Name' von "Beschreibung darf nicht leer sein!" Bezeichnung ist gleich 'Beschreibung darf nicht leer sein!'
            Assert.AreEqual(this.Assert_FailExpectedValues.UIBeschreibungdarfnichText1Name, uIBeschreibungdarfnichText1.Name, "Create_Todo_Fail Failed");
        }
        
        /// <summary>
        /// Assert_Success - Verwenden Sie "Assert_SuccessExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Assert_Success()
        {
            #region Variable Declarations
            WpfText uITodowurdeerfolgreichText1 = this.UITodosWindow.UIItemCustom.UIBeschreibungdarfnichText.UITodowurdeerfolgreichText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'ControlType' von "Todo wurde erfolgreich gespeichert" Bezeichnung ist gleich 'Text'
            Assert.AreEqual(this.Assert_SuccessExpectedValues.UITodowurdeerfolgreichText1ControlType, uITodowurdeerfolgreichText1.ControlType.ToString(), "Todo wurde erfolgreich gespeichert");
        }
        
        /// <summary>
        /// Create_Todo_Fail
        /// </summary>
        public void Create_Todo_Fail()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIM120ProjektexeListItem.UINameEdit;
            WpfButton uINeuesTodoerstellenButton = this.UITodosWindow.UIViewPane.UINeuesTodoerstellenButton;
            WpfButton uIButtonSaveButton = this.UITodosWindow.UIViewPane.UIButtonSaveButton;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(67, 11));

            // Klicken "Neues Todo erstellen" Schaltfläche
            Mouse.Click(uINeuesTodoerstellenButton, new Point(126, 25));

            // Klicken "buttonSave" Schaltfläche
            Mouse.Click(uIButtonSaveButton, new Point(80, 16));
        }
        
        /// <summary>
        /// Create_Todo - Verwenden Sie "Create_TodoParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Create_Todo()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIM120ProjektexeListItem.UINameEdit;
            WpfButton uINeuesTodoerstellenButton = this.UITodosWindow.UIViewPane.UINeuesTodoerstellenButton;
            WpfEdit uIDescriptionEdit = this.UITodosWindow.UIViewPane.UIDescriptionEdit;
            WpfButton uIButtonSaveButton = this.UITodosWindow.UIViewPane.UIButtonSaveButton;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(38, 5));

            // Klicken "Neues Todo erstellen" Schaltfläche
            Mouse.Click(uINeuesTodoerstellenButton, new Point(135, 15));

            // "Test" in "description" Textfeld eingeben
            uIDescriptionEdit.Text = this.Create_TodoParams.UIDescriptionEditText;

            // Klicken "buttonSave" Schaltfläche
            Mouse.Click(uIButtonSaveButton, new Point(90, 22));
        }
        
        /// <summary>
        /// CloseWindow
        /// </summary>
        public void CloseWindow()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UITodosWindow1.UISchließenButton;
            #endregion

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(13, 15));
        }
        
        /// <summary>
        /// EditTodo - Verwenden Sie "EditTodoParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void EditTodo()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIM120ProjektexeListItem.UINameEdit;
            WpfText uITestText = this.UITodosWindow.UIItemCustom1.UITodoListTable.UIItem1Row.UIQaaaaCell.UITestText;
            WpfEdit uIDescriptionEdit = this.UITodosWindow.UIViewPane.UIDescriptionEdit;
            WpfButton uIButtonSaveButton = this.UITodosWindow.UIViewPane.UIButtonSaveButton;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(50, 7));

            // Doppelklicken "Test" Bezeichnung
            Mouse.DoubleClick(uITestText, new Point(83, 7));

            // "TestTest" in "description" Textfeld eingeben
            uIDescriptionEdit.Text = this.EditTodoParams.UIDescriptionEditText;

            // Klicken "buttonSave" Schaltfläche
            Mouse.Click(uIButtonSaveButton, new Point(59, 11));
        }
        
        /// <summary>
        /// Edit_Todo - Verwenden Sie "Edit_TodoParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Edit_Todo()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIM120ProjektexeListItem.UINameEdit;
            WpfText uIItemText = this.UITodosWindow.UIItemCustom1.UITodoListTable.UIItem1Row.UIElement1AnzeigeindexCell.UIItemText;
            WpfEdit uIDescriptionEdit = this.UITodosWindow.UIViewPane.UIDescriptionEdit;
            WpfButton uIButtonSaveButton = this.UITodosWindow.UIViewPane.UIButtonSaveButton;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(131, 8));

            // Doppelklicken Bezeichnung
            Mouse.DoubleClick(uIItemText, new Point(55, 5));

            // "TestTest" in "description" Textfeld eingeben
            uIDescriptionEdit.Text = this.Edit_TodoParams.UIDescriptionEditText;

            // Klicken "buttonSave" Schaltfläche
            Mouse.Click(uIButtonSaveButton, new Point(69, 27));
        }
        
        #region Properties
        public virtual Assert_FailExpectedValues Assert_FailExpectedValues
        {
            get
            {
                if ((this.mAssert_FailExpectedValues == null))
                {
                    this.mAssert_FailExpectedValues = new Assert_FailExpectedValues();
                }
                return this.mAssert_FailExpectedValues;
            }
        }
        
        public virtual Assert_SuccessExpectedValues Assert_SuccessExpectedValues
        {
            get
            {
                if ((this.mAssert_SuccessExpectedValues == null))
                {
                    this.mAssert_SuccessExpectedValues = new Assert_SuccessExpectedValues();
                }
                return this.mAssert_SuccessExpectedValues;
            }
        }
        
        public virtual Create_TodoParams Create_TodoParams
        {
            get
            {
                if ((this.mCreate_TodoParams == null))
                {
                    this.mCreate_TodoParams = new Create_TodoParams();
                }
                return this.mCreate_TodoParams;
            }
        }
        
        public virtual EditTodoParams EditTodoParams
        {
            get
            {
                if ((this.mEditTodoParams == null))
                {
                    this.mEditTodoParams = new EditTodoParams();
                }
                return this.mEditTodoParams;
            }
        }
        
        public virtual Edit_TodoParams Edit_TodoParams
        {
            get
            {
                if ((this.mEdit_TodoParams == null))
                {
                    this.mEdit_TodoParams = new Edit_TodoParams();
                }
                return this.mEdit_TodoParams;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UITodosWindow UITodosWindow
        {
            get
            {
                if ((this.mUITodosWindow == null))
                {
                    this.mUITodosWindow = new UITodosWindow();
                }
                return this.mUITodosWindow;
            }
        }
        
        public UITodosWindow1 UITodosWindow1
        {
            get
            {
                if ((this.mUITodosWindow1 == null))
                {
                    this.mUITodosWindow1 = new UITodosWindow1();
                }
                return this.mUITodosWindow1;
            }
        }
        #endregion
        
        #region Fields
        private Assert_FailExpectedValues mAssert_FailExpectedValues;
        
        private Assert_SuccessExpectedValues mAssert_SuccessExpectedValues;
        
        private Create_TodoParams mCreate_TodoParams;
        
        private EditTodoParams mEditTodoParams;
        
        private Edit_TodoParams mEdit_TodoParams;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UITodosWindow mUITodosWindow;
        
        private UITodosWindow1 mUITodosWindow1;
        #endregion
    }
    
    /// <summary>
    /// An "Assert_Fail" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class Assert_FailExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'Name' von "Beschreibung darf nicht leer sein!" Bezeichnung ist gleich 'Beschreibung darf nicht leer sein!'
        /// </summary>
        public string UIBeschreibungdarfnichText1Name = "Beschreibung darf nicht leer sein!";
        #endregion
    }
    
    /// <summary>
    /// An "Assert_Success" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class Assert_SuccessExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'ControlType' von "Todo wurde erfolgreich gespeichert" Bezeichnung ist gleich 'Text'
        /// </summary>
        public string UITodowurdeerfolgreichText1ControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// An "Create_Todo" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class Create_TodoParams
    {
        
        #region Fields
        /// <summary>
        /// "Test" in "description" Textfeld eingeben
        /// </summary>
        public string UIDescriptionEditText = "Test";
        #endregion
    }
    
    /// <summary>
    /// An "EditTodo" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class EditTodoParams
    {
        
        #region Fields
        /// <summary>
        /// "TestTest" in "description" Textfeld eingeben
        /// </summary>
        public string UIDescriptionEditText = "TestTest";
        #endregion
    }
    
    /// <summary>
    /// An "Edit_Todo" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class Edit_TodoParams
    {
        
        #region Fields
        /// <summary>
        /// "TestTest" in "description" Textfeld eingeben
        /// </summary>
        public string UIDescriptionEditText = "TestTest";
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Elementansicht";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIM120ProjektexeListItem UIM120ProjektexeListItem
        {
            get
            {
                if ((this.mUIM120ProjektexeListItem == null))
                {
                    this.mUIM120ProjektexeListItem = new UIM120ProjektexeListItem(this);
                }
                return this.mUIM120ProjektexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIM120ProjektexeListItem mUIM120ProjektexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UIM120ProjektexeListItem : WinListItem
    {
        
        public UIM120ProjektexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinListItem.PropertyNames.Name] = "M120Projekt.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Suchkriterien
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UITodosWindow : WpfWindow
    {
        
        public UITodosWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Todos";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Todos");
            #endregion
        }
        
        #region Properties
        public UIViewPane UIViewPane
        {
            get
            {
                if ((this.mUIViewPane == null))
                {
                    this.mUIViewPane = new UIViewPane(this);
                }
                return this.mUIViewPane;
            }
        }
        
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIItemCustom1 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom1(this);
                }
                return this.mUIItemCustom1;
            }
        }
        #endregion
        
        #region Fields
        private UIViewPane mUIViewPane;
        
        private UIItemCustom mUIItemCustom;
        
        private UIItemCustom1 mUIItemCustom1;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UIViewPane : WpfPane
    {
        
        public UIViewPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "View";
            this.WindowTitles.Add("Todos");
            #endregion
        }
        
        #region Properties
        public WpfButton UINeuesTodoerstellenButton
        {
            get
            {
                if ((this.mUINeuesTodoerstellenButton == null))
                {
                    this.mUINeuesTodoerstellenButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUINeuesTodoerstellenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonCreate";
                    this.mUINeuesTodoerstellenButton.WindowTitles.Add("Todos");
                    #endregion
                }
                return this.mUINeuesTodoerstellenButton;
            }
        }
        
        public WpfButton UIButtonSaveButton
        {
            get
            {
                if ((this.mUIButtonSaveButton == null))
                {
                    this.mUIButtonSaveButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIButtonSaveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonSave";
                    this.mUIButtonSaveButton.WindowTitles.Add("Todos");
                    #endregion
                }
                return this.mUIButtonSaveButton;
            }
        }
        
        public WpfEdit UIDescriptionEdit
        {
            get
            {
                if ((this.mUIDescriptionEdit == null))
                {
                    this.mUIDescriptionEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUIDescriptionEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "description";
                    this.mUIDescriptionEdit.WindowTitles.Add("Todos");
                    #endregion
                }
                return this.mUIDescriptionEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUINeuesTodoerstellenButton;
        
        private WpfButton mUIButtonSaveButton;
        
        private WpfEdit mUIDescriptionEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UserControl1";
            this.WindowTitles.Add("Todos");
            #endregion
        }
        
        #region Properties
        public UIBeschreibungdarfnichText UIBeschreibungdarfnichText
        {
            get
            {
                if ((this.mUIBeschreibungdarfnichText == null))
                {
                    this.mUIBeschreibungdarfnichText = new UIBeschreibungdarfnichText(this);
                }
                return this.mUIBeschreibungdarfnichText;
            }
        }
        #endregion
        
        #region Fields
        private UIBeschreibungdarfnichText mUIBeschreibungdarfnichText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UIBeschreibungdarfnichText : WpfText
    {
        
        public UIBeschreibungdarfnichText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "messageLabel";
            this.WindowTitles.Add("Todos");
            #endregion
        }
        
        #region Properties
        public WpfText UIBeschreibungdarfnichText1
        {
            get
            {
                if ((this.mUIBeschreibungdarfnichText1 == null))
                {
                    this.mUIBeschreibungdarfnichText1 = new WpfText(this);
                    #region Suchkriterien
                    this.mUIBeschreibungdarfnichText1.SearchProperties[WpfText.PropertyNames.Name] = "Beschreibung darf nicht leer sein!";
                    this.mUIBeschreibungdarfnichText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIBeschreibungdarfnichText1.WindowTitles.Add("Todos");
                    #endregion
                }
                return this.mUIBeschreibungdarfnichText1;
            }
        }
        
        public WpfText UITodowurdeerfolgreichText1
        {
            get
            {
                if ((this.mUITodowurdeerfolgreichText1 == null))
                {
                    this.mUITodowurdeerfolgreichText1 = new WpfText(this);
                    #region Suchkriterien
                    this.mUITodowurdeerfolgreichText1.SearchProperties[WpfText.PropertyNames.Name] = "Todo wurde erfolgreich gespeichert";
                    this.mUITodowurdeerfolgreichText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUITodowurdeerfolgreichText1.WindowTitles.Add("Todos");
                    #endregion
                }
                return this.mUITodowurdeerfolgreichText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIBeschreibungdarfnichText1;
        
        private WpfText mUITodowurdeerfolgreichText1;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Todo_Listview";
            this.WindowTitles.Add("Todos");
            #endregion
        }
        
        #region Properties
        public UITodoListTable UITodoListTable
        {
            get
            {
                if ((this.mUITodoListTable == null))
                {
                    this.mUITodoListTable = new UITodoListTable(this);
                }
                return this.mUITodoListTable;
            }
        }
        #endregion
        
        #region Fields
        private UITodoListTable mUITodoListTable;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UITodoListTable : WpfTable
    {
        
        public UITodoListTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "todoList";
            this.WindowTitles.Add("Todos");
            #endregion
        }
        
        #region Properties
        public UIItem1Row UIItem1Row
        {
            get
            {
                if ((this.mUIItem1Row == null))
                {
                    this.mUIItem1Row = new UIItem1Row(this);
                }
                return this.mUIItem1Row;
            }
        }
        #endregion
        
        #region Fields
        private UIItem1Row mUIItem1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UIItem1Row : WpfRow
    {
        
        public UIItem1Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfRow.PropertyNames.Name] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Todos");
            #endregion
        }
        
        #region Properties
        public UIQaaaaCell UIQaaaaCell
        {
            get
            {
                if ((this.mUIQaaaaCell == null))
                {
                    this.mUIQaaaaCell = new UIQaaaaCell(this);
                }
                return this.mUIQaaaaCell;
            }
        }
        
        public UIElement1AnzeigeindexCell UIElement1AnzeigeindexCell
        {
            get
            {
                if ((this.mUIElement1AnzeigeindexCell == null))
                {
                    this.mUIElement1AnzeigeindexCell = new UIElement1AnzeigeindexCell(this);
                }
                return this.mUIElement1AnzeigeindexCell;
            }
        }
        #endregion
        
        #region Fields
        private UIQaaaaCell mUIQaaaaCell;
        
        private UIElement1AnzeigeindexCell mUIElement1AnzeigeindexCell;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UIQaaaaCell : WpfCell
    {
        
        public UIQaaaaCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Beschreibung";
            this.WindowTitles.Add("Todos");
            #endregion
        }
        
        #region Properties
        public WpfText UIQaaaaText
        {
            get
            {
                if ((this.mUIQaaaaText == null))
                {
                    this.mUIQaaaaText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIQaaaaText.SearchProperties[WpfText.PropertyNames.Name] = "qaaaa";
                    this.mUIQaaaaText.WindowTitles.Add("Todos");
                    #endregion
                }
                return this.mUIQaaaaText;
            }
        }
        
        public WpfText UITestText
        {
            get
            {
                if ((this.mUITestText == null))
                {
                    this.mUITestText = new WpfText(this);
                    #region Suchkriterien
                    this.mUITestText.SearchProperties[WpfText.PropertyNames.Name] = "Test";
                    this.mUITestText.WindowTitles.Add("Todos");
                    #endregion
                }
                return this.mUITestText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIQaaaaText;
        
        private WpfText mUITestText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UIElement1AnzeigeindexCell : WpfCell
    {
        
        public UIElement1AnzeigeindexCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Priorität";
            this.WindowTitles.Add("Todos");
            #endregion
        }
        
        #region Properties
        public WpfText UIItemText
        {
            get
            {
                if ((this.mUIItemText == null))
                {
                    this.mUIItemText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIItemText.WindowTitles.Add("Todos");
                    #endregion
                }
                return this.mUIItemText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItemText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "16.0.28315.86")]
    public class UITodosWindow1 : WinWindow
    {
        
        public UITodosWindow1()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Todos";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Todos");
            #endregion
        }
        
        #region Properties
        public WinButton UISchließenButton
        {
            get
            {
                if ((this.mUISchließenButton == null))
                {
                    this.mUISchließenButton = new WinButton(this);
                    #region Suchkriterien
                    this.mUISchließenButton.SearchProperties[WinButton.PropertyNames.Name] = "Schließen";
                    this.mUISchließenButton.WindowTitles.Add("Todos");
                    #endregion
                }
                return this.mUISchließenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISchließenButton;
        #endregion
    }
}
